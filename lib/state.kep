/**
 * @fileOverview
 */
package (
    Debugger,
    
    isComplete,
    getResult,
    
    addBreakpoint,
    removeBreakpoint)
with
    import 'amulet/record' record,
    import 'amulet/object' {deleteProperty, setProperty},

    import 'sheut/fun' {concat}
in {

/* Debugger
 ******************************************************************************/
/**
 * State of debugger.
 * 
 * @param debug Debugger session state.
 * @param breakpoints Array of breakpoints.
 */
Debugger = record.declare(null, [
    'debug',
    'breakpoints']);

Debugger.initial = Debugger.create(null, {});

/* Operations
 ******************************************************************************/
/**
 * 
 */
isComplete = \d ->
    (d.debug && d.debug.complete);

/**
 * 
 */
getResult = \d ->
    (d.debug && d.debug.complete ?
        d.debug.k :
        null);

/**
 * Register a breakpoint.
 * 
 * Overwrites any breakpoint alreay registered with the given id.
 * 
 * @param d Debug state.
 * @param id Unique id for breakpoint.
 * @param breakpoint Breakpoint object.
 */
addBreakpoint = \d, id, breakpoint ->
    d.setBreakpoints(
        setProperty(d.breakpoints, id, breakpoint, true));

/**
 * Unregister a breakpoint.
 * 
 * @param d Debug state.
 * @param id Unique id for breakpoint.
 */
removeBreakpoint = \d, id ->
    d.setBreakpoints(
        deleteProperty(d.breakpoints, id));

}