/**
 * @fileOverview
 */
package (
    Breakpoint,
    
    createUnconditional,
    createConditional)
with
    import 'amulet/record' record,
    import 'atum/compute' {bind},
    import 'atum/compute/program' program,
    import 'atum/debug/debuggable' debuggable,
    import 'atum/operations/boolean' {isTrue},
    import 'sheut/operations' operations
in {

/* Breakpoint
 ******************************************************************************/
Breakpoint = record.declare(null, [
    'id',
    'test']);

/* Unconditional Breakpoint
 ******************************************************************************/
/**
 * 
 */
createUnconditional = \id, line ->
    Breakpoint.create(
        id,
        \d -> operations.executeContext(d, operations.location,
            \currentLocation ->
                (currentLocation && currentLocation.start.line === line),
            \_ -> false));

/* Conditional Breakpoint
 ******************************************************************************/
createConditional = \id, prog -> let
    condition = program.bind(prog, isTrue \> program.liftStatement)
in
    Breakpoint.create(
        id,
        \d -> operations.executeContext(d, condition,
            \result -> result,
            \_ -> false));

/* Breakpoint Combinators
 ******************************************************************************/
var binary = \f ->
    \id, b1, b2 ->
        Breakpoint.create(
            id,
            \d -> f(b1.test(d), b2.test(d)));

var and = binary((&&));

var or = binary((||));

}