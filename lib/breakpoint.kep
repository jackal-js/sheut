/**
 * @fileOverview Breakpoint record and breakpoint specific policies.
 */
package (
    Breakpoint,
    create,

// Base Policies
    unconditional,
    conditional)
with
    import 'amulet/record' record,
    import 'atum/compute' {bind},
    import 'atum/compute/program' program,
    import 'atum/operations/boolean' {isTrue},
    import 'sheut/run' {extract},
    import 'sheut/operations/context' context,
    import 'sheut/fun' {args, foldl}

in {

/* Breakpoint
 ******************************************************************************/
/**
 * Breakpoint record
 * 
 * @param id Unique identifier this breakpoint.
 * @param test Policy that determines when this breakpoint is triggered. Policy
 *     is bound to the breakpoint when called.
 * @param ud Custom user data stored on the breakpoint.
 */
Breakpoint = record.declare(null, [
    'id',
    'test',
    'ud']);

create = Breakpoint.create;

/* Base Policies
 ******************************************************************************/
/**
 * Test for a breakpoint that unconditionally breaks on a line.
 * 
 * @param line Line Number.
 */
unconditional = \line ->
    \current, next -> extract(current, context.location, false,
        \currentLocation ->
            extract(next, context.location, false,
                \nextLocation -> 
                    ((!currentLocation || currentLocation.start.line !== line) && nextLocation && nextLocation.start.line === line)));

/**
 * Test for a breakpoint that conditionally breaks when a condition is satisfied.
 */
conditional = \prog -> let
    condition = program.bind(prog, isTrue \> program.liftStatement)
in
    \_, next -> extract(next, condition, false);

}