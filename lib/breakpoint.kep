/**
 * @fileOverview
 */
package (
    Breakpoint,
    
    createUnconditional,
    createConditional,

// Combinators
    and,
    or)
with
    import 'amulet/record' record,
    import 'atum/compute' {bind},
    import 'atum/compute/program' program,
    import 'atum/operations/boolean' {isTrue},
    import 'sheut/run' operations,
    import 'sheut/operations/context' context
in {

/* Breakpoint
 ******************************************************************************/
Breakpoint = record.declare(null, [
    'id',
    'test',
    'ud']);

/* Unconditional Breakpoint
 ******************************************************************************/
/**
 * 
 */
createUnconditional = \id, line ->
    Breakpoint.create(
        id,
        \current, next -> operations.evaluate(current, context.location,
            \currentLocation ->
                operations.evaluate(next, context.location,
                    \nextLocation -> 
                        ((!currentLocation || currentLocation.start.line !== line) && nextLocation && nextLocation.start.line === line),
                    \_ -> false),
            \_ -> false));

/* Conditional Breakpoint
 ******************************************************************************/
createConditional = \id, prog -> let
    condition = program.bind(prog, isTrue \> program.liftStatement)
in
    Breakpoint.create(
        id,
        \_, next -> operations.evaluate(next, condition,
            \result -> result,
            \_ -> false));

/* Breakpoint Combinators
 ******************************************************************************/
var binary = \f ->
    \id, b1, b2 ->
        Breakpoint.create(
            id,
            \d -> f(b1.test(d), b2.test(d)));

and = binary((&&));

or = binary((||));

}