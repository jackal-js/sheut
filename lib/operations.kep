/**
 * @fileOverview
 */
package (
    execute,
    
// Evaluation
    evaluateAst,
    evaluateInput,

// Operations
    getFrom,
    getValue)
with
    import 'ecma/parse/parser' {parse},
    import 'atum/compute' {always},
    import 'atum/operations/internal_reference' internal_reference,
    import 'atum/operations/value_reference' value_reference,
    import 'atum/semantics/semantics' {programBody, sourceElements},
    import 'sheut/run' {debug},
    import 'sheut/step' {finish}
in {

var ret = \x -> x;
var thr = \x -> { throw x; };

/* Execute
 ******************************************************************************/
/**
 * Evaluate `p` in the current context for `d`.
 * 
 * @param d Debugger providing compute context.
 * @param p Computation.
 * @param [ok] Success completion.
 * @param [err] Failure completion.
 */
execute = \d, p, ok, err ->
    finish(
        debug(
            p,
            d.ctx,
            (ok || ret),
            (err || thr))).k;

/* Evaluation
 ******************************************************************************/
/**
 * Evaluate an abstract syntax tree in the compute context from `d`.
 */
evaluateAst = \root ->
    programBody(
        sourceElements(root.body));

/**
 * Evaluate a string in the compute context from `d`.
 * 
 * @see evaluate
 */
evaluateInput = parse \> evaluateAst;

/* Operations
 ******************************************************************************/
/**
 * Dereference the result of `p` in the compute context from `d`.
 * 
 * @see evaluate
 */
getFrom = internal_reference.getFrom \> value_reference.getFrom;

/**
 * Dereference `ref` in the compute context from `d`.
 * 
 * @see evaluate
 */
getValue = always \> getFrom;

/* State
 ******************************************************************************/

}