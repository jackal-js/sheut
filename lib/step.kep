/**
 * @fileOverview
 */
package (
    step,
    stepWhile,
    finish,
    stepOver,
    stepOut,
    run)
with
    import 'atum/compute' compute,
    import 'atum/compute/tail' tail,
    import 'atum/debug/debuggable' debuggable,
    import 'atum/operations/internal_reference' internal_reference,
    import 'atum/operations/value_reference' value_reference,
    import 'atum/value/value' value,
    import 'atum/value/type' type,
    import 'sheut/state' {Debugger}
in {

var foldl = \f, z, a -> Array.prototype.reduce.call(a, f, z);

var args = \args() -> args;

var constant = \x -> \() -> x;

/* Basic Policies
 ******************************************************************************/
var always = constant(true);

var never = constant(false);

var notComplete = \current, next -> !next.complete;

/* Policies
 ******************************************************************************/
var testDepth = \pred ->
    \current, next ->
        pred(next.depth, current.depth);

var depthGt = testDepth((>));

var depthLte = testDepth((<=));

var testDgr = \pred ->
    \_, next ->
        pred(next.dgr);

/* Policy Combinators
 ******************************************************************************/
/**
 * 
 */
var not = \p -> (p \> (!));

/**
 * 
 */
var binary = \f ->
    \a, b ->
        \current, next ->
            f(a(current, next), b(current, next));
    
/**
 * Are two policies both satisfied?
 */
var and = binary((&&));

/**
 * Are either of two policies satisfied.
 */
var or = binary((||));

/**
 * Are all of the policies, passed as arguments, satisfied.
 */
var all = args \> (foldl, and, always);

/**
 * Are any of the policies, passed as arguments, satisfied.
 */
var any = args \> (foldl, or, never);

/* Stepping Operations
 ******************************************************************************/
/**
 * Perform a single step without any policy.
 * 
 * @param d Debugger state.
 */
step = \d ->
    (d.complete ? d :
        let next = tail.trampoline(d.k(null, d.ctx)) in
            (next instanceof debuggable.Debuggable ?
                new Debugger(next, next.k, next.ctx) :
                next));

/**
 * Step while `policy` is satisfied.
 * 
 * @param policy Binary predicate taking current and next state that determines
 *    when to stop stepping.
 * @param d Debugger state.
 */
stepWhile = \policy, d -> {
    var next = d;
    do {
        next = step(next);
    } while (policy(d, next));
    return next;
};

/**
 * Step to completion.
 */
finish = (stepWhile,
    notComplete);

/**
 * Step over a function call.
 */
stepOver = (stepWhile,
    and(
        notComplete,
        depthGt));

/**
 * Step out of a function call.
 */
stepOut = (stepWhile,
    and(
        notComplete,
        depthLte));

/**
 * Run until a debugger statement is hit.
 */
run = (stepWhile,
    and(
        notComplete,
        not(
            testDgr(\dgr -> dgr instanceof debuggable.DebuggerDebuggable))));

}